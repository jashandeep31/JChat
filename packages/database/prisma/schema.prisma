generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  avatar        String?
  email         String          @unique
  proUser       Boolean         @default(false)
  totalCredits  Float           @default(0)
  credits       Float           @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Project       Project[]
  Chat          Chat[]
  attachment    Attachment[]
  ChatShareLink ChatShareLink[]
  ApiKey        ApiKey[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  userId      String
  archived    Boolean  @default(false)
  Chat        Chat[]
  instruction String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Chat {
  id          String   @id @default(uuid())
  name        String
  archived    Boolean  @default(false)
  projectId   String?
  type        ChatType @default(DIRECT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  instruction String?

  project       Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  ChatQuestion  ChatQuestion[]
  user          User            @relation(fields: [userId], references: [id])
  ChatShareLink ChatShareLink[]
}

model Company {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  logo      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  AiModel   AiModel[]
  ApiKey    ApiKey[]
}

model AiModel {
  id                 String               @id @default(cuid())
  name               String
  slug               String               @unique
  logo               String
  tag                String?
  type               AiModelType          @default(TEXT_GENERATION)
  requiresPro        Boolean              @default(false)
  credits            Float                @default(0)
  pdfAnalysis        Boolean              @default(false)
  imageAnalysis      Boolean              @default(false)
  webAnalysis        Boolean              @default(false)
  reasoning          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  companyId          String
  ChatQuestionAnswer ChatQuestionAnswer[]
  company            Company              @relation(fields: [companyId], references: [id])
}

enum AiModelType {
  TEXT_GENERATION
  IMAGE_GENERATION
}

enum ChatType {
  BRANCHED
  DIRECT
}

model ChatQuestion {
  id                 String               @id @default(uuid())
  chatId             String
  question           String
  credits            Float                @default(0)
  attachmentId       String?
  webSearch          Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  chat               Chat                 @relation(fields: [chatId], references: [id], onDelete: Cascade)
  attachment         Attachment?          @relation(fields: [attachmentId], references: [id])
  ChatQuestionAnswer ChatQuestionAnswer[]
}

model ChatQuestionAnswer {
  id             String  @id @default(uuid())
  chatQuestionId String
  base64Image    String?
  answer         String
  reasoning      String?
  credits        Float   @default(0)
  aiModelId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatQuestion ChatQuestion @relation(fields: [chatQuestionId], references: [id], onDelete: Cascade)
  aiModel      AiModel      @relation(fields: [aiModelId], references: [id])
  WebSearch    WebSearch[]
}

model Attachment {
  id           String         @id @default(uuid())
  uploadId     String         @unique
  filename     String
  publicUrl    String
  openAiId     String?
  googleId     String?
  userId       String
  type         AttachmentType @default(IMAGE)
  user         User           @relation(fields: [userId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ChatQuestion ChatQuestion[]
}

enum AttachmentType {
  IMAGE
  PDF
}

model ChatShareLink {
  id        String   @id @default(uuid())
  userId    String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(uuid())
  name      String
  userId    String
  companyId String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
}

model WebSearch {
  id                   String             @id @default(uuid())
  title                String
  url                  String
  chatQuestionAnswerId String
  answer               ChatQuestionAnswer @relation(fields: [chatQuestionAnswerId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}
